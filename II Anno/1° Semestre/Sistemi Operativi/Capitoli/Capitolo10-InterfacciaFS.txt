CAPITOLO 10:  INTERFACCIA DEL FILE SYSTEM 
 
Per la maggior parte degli utenti il file system è l’aspetto più visibile di un sistema operativo. Il file system consiste di due distinte pari; un insieme di file e una struttura della directory 
 
1. CONCETTO DI FILE 
I calcolatori possono memorizzare le informazioni su diversi supporti come dischi, nastri magnetici e dischi ottici. Il SO associa i file a dispositivi fisici, di solito non volatili. Un file è un insieme di informazioni correlate e registrate in memoria secondaria. I file possono essere numerici, alfabetici, ecc. un file ha una struttura definita secondo il tipo: un file di testo è organizzato come una sequenza di caratteri, un file sorgente da una sequenza di procedure.

|||||ATTRIBUTI DEI FILE
Per comodità degli utenti, ogni file ha un nome che si usa come riferimento. Alcuni sistemi nella composizione dei nomi, distinguono le lettere maiuscole dalle minuscole  Un file ha altri attributi che possono variare secondo il SO che tipicamente sono:
- Nome.
- Identificatore. Si tratta di un’etichetta unica che identifica il file all’interno del file system ? 
- Tipo. Questa informazione è necessaria ai sistemi che gestiscono tipi di file diversi ? 
- Locazione. Si tratta del puntatore al dispositivo e alla locazione del file ? -- Dimensione. Si tratta della dimensione corrente del file ? 
- Protezione. Le informazioni di controllo sull’accesso al file ? 
- Ora, data e identificatore utente. Possono essere relative alla creazione, modifica. Sono utili al fine della protezione. 

|||||OPERAZIONE SUI FILE
Un file è un tipo di dato astratto. Per definire adeguatamente un file è necessario considerare le operazioni che si possono eseguire su di esso. Il SO  deve offrire operazioni per creare, scrivere, leggere, spostare, ecc.  
? Creazione di un file. Per creare un file è necessario compiere 2 passaggi: si deve trovare lo spazio per il file nel file system e si deve creare un nuovo elemento nella directory in cui registrare il nome del file. 
? Scrittura nel file. È indispensabile una chiamata che verifichi il nome e le informazioni che si vogliono scrivere ? Lettura di un file. Per leggere da un file è necessaria una chiamata di sistema che specifichi il nome del file e la posizione in memoria dove collocare il successivo blocca del file.  
? Riposizionamento. Si ricerca l’elemento appropriato nella directory e si assegna un nuovo valore al puntatore alla posizione corrente nel file. 
? Cancellazione di un file. Si cerca l’elemento nella directory associata e si rilascio lo spazio allocato e si elimina l’elemento della directory. 
? Troncamento del file. Si potrebbe voler cancellare il contenuti di un file ma mantenere i suoi attribuiti, si azzera cosi il suo contenuto. Queste 6 operazioni di base comprendono l’insieme minimo delle operazioni richieste per i file. Quando si devono effettuare più operazioni su un file, anziché aprire e chiudere lo stesso file, attraverso la chiamata  di sistema open si memorizza in una piccola tabella detta tabella dei file aperti il quale nelle operazioni successive provvede ad individuarlo in tale tabella. La realizzazione della open e close è più complicata nei sistemi multiutente quando più utenti possono accedere allo stesso file. Quindi il SO introduce due tabella, uno per ciascun processo e uno per il sistema. Ciascun elemento associato ad ogni processo punta a una tabella del sistema.  

A ciascun file aperto sono associate le seguenti informazioni: 
? Puntatore al file. Indica la posizione corrente nel file dove è possibile effettuare read e write 
? Contatore dei file aperti. Si tiene conto dei file aperti e non appena un file viene chiuso da tutti i processi, viene tolto dalla tabella 
? Posizione nel disco del file. La maggior parte delle operazioni richiede al sistema di modificare i dati contenuti nel file. L’informazione per localizzare il file nel disco è mantenuta in memoria.  
? Diritti di accesso. Ciascun file può essere aperto solo da coloro che hanno i permessi nel farlo.  Alcuni SO permettono ad un file di proteggersi da un accesso concorrente attraverso i lock. Un lock condiviso funziona simile al lock x lettura e un lock esclusivo simile a quello per scrittura.    

|||||TIPI DI FILE 
Nella progettazione di un file system, ma che dell’intero SO si deve sempre considerata la possibilità che questo ricerca e gestisca i tipi di file. La maggior parte dei SO alla fine del nome del file associa un’estensione costituita da un punto e da una serie di caratteri che identificano i tipi di file. 
 
2. METODI D’ACCESSO 
I file memorizza informazioni al momento dell’uso è necessario acceder a queste informazioni e trasferirle in memoria.    

|||||ACCESSO SEQUENZIALE 
Il più semplice metodo d’accesso è l’accesso sequenziale. Le informazioni del file si elaborano ordinatamente un record dopo l’altro; questo metodo d’accesso è di gran lunga il più comune e usato dagli editor di testo. Le più comuni operazioni solo letture e scrittura. La lettura fa avanzare il puntatore e la scrittura avviene in coda al file.    

|||||ACCESSO DIRETTO
Un altro metodo è l’accesso diretto. Un file è formato da elementi logici record di lunghezza fissa; cioè consente ai programmi di leggere e scrivere rapidamente dagli elementi senza un ordine particolare. Il metodo ad accesso diretto è molto utile quando è necessario accedere immediatamente a grandi quantità di informazioni. Spesso le basi di dati sono di quello tipo. Per il metodo ad accesso diretto si devono modificare le operazioni. Quindi si hanno n dove n è il numero del blocco al posto di read next e write n al posto di write next. Il numero di blocco è un blocco relativo dall’inizio del file a partire dal blocco 0. 
  
3. STRUTTURA DELLA DIRECTORY 
Finora si è analizzato il concetto di file system. In realtà il numero di file può variare da zero a molti. In file system di un calcolatore può essere molto ampio.    
|||||STRUTTURA DELLA MEMORIA DI MASSA
Un disco può essere interamente usato per un file system. Talvolta per utilizzare altre parti in maniera differente,  preferibile concentrare diversi file system su un solo disco o assegnare alcune parti di un disco al file system, altri ad altre. Il disco può essere suddiviso in partizione e in ogni partizione è possibile installare un file system. Chiameremo volume ogni blocco di disco che contiene un file system ogni volume deve avere in se le informazioni sui file presenti nel sistema. Tali informazioni risiedono in una directory del dispositivo o d’indice del volume.    

|||||DIRECTORY
La directory si può considerare come una tabella di simboliche traduce i nomi dei file negli elementi in essa contenuti. Da questo punti di vista si capisce che la stessa directory si può organizzare in molti modi diversi. Deve essere possibile inserire nuovi elementi cancellarne di esistenti cercare un elemento.  
Ricerca di un file. Deve esserci la possibilità di scorrere una directory per individuare l’elemento associato a un particolare file 
? Creazione di un file. Deve essere possibile creare nuovi file e aggiungerli alla directory 
? Cancellazione di un file. Quando un file non serve è più deve essere possibile rimuoverli. 
? Elencazione di una directory. Deve esistere la possibilità di elencare tutti i file di una directory e il contenuto degli elementi della directory associati ai rispettivi file nell’0elecono 
? Ridenominazione di un file. Piche un nome di un file rappresenta per i suoi utenti il contenuto del file, questo nome deve poter essere cambiato 
? Attraversamento del file system. Si potrebbe voler accedere a ogni directory e a ciascun file contenuto di una directory. Per motivi di affidabilità è opportuno salvare in contenuto e la struttura dell'intero file system a intervalli regolari 

|||||DIRECTORY A LIVELLO SINGOLO  
La struttura più semplice di una directory è quella a livello singolo. Tutti i file sono contenuti nella stessa directory. Una directory a livello singolo presenta pero limiti notevoli che si manifestano all’aumentare del numero dei file in essa contenuti oppure se il sistema è usato da più utenti. Poiché si trovano tutti nella stessa directory, i file devono accedere nomi unici; se due utenti volessero creare un file prova non lo possono fare.  
 
|||||DIRECTORY A DUE LIVELLI
La directory a livello singolo crea confusine sui nomi dei file tra diversi utente. La struttura a due livelli presenta per ogni utente una propria directory utente. Tutte le directory utente hanno una struttura simile ma in ciascuna sono elencate solo i file del proprietario. Quando comincia l’elaborazione di un lavoro dell’utente, si fa una ricerca della nella directory principale del sistema. Quando un utente fa un riferimento a un file particolar, il sistema operativo esegue la ricerca solo nella directory di quell’utente. La struttura della directory a due livelli presenta ancora dei problemi. In effetti questa struttura isola un utente dagli altri. Questo isolamento può essere un vantaggio quando gli utenti sono completamente indipendenti ma uno svantaggio quando gli utenti vogliono cooperare e accederà a file di altri utenti .un directory a 2 livelli è visto come un albero di altezza 2. il nome utente e un nome del file definiscono il path. Un altro problema si riferisce al fatto delle chiamate di sistema e i file di sistema che per non sprecare spazio nel copiare ogni file di sistema in ciascun utente, si definisce una speciale directory utente contente i file di sistemi. Ogni volta che si indica un file da caricare, il sistema operativo lo cerca innanzitutto nella director utente locale e se lo trova, lo usa. Se non lo trova il sistema cerca automaticamente nella speciale directory utente contenente i file di sistema. La sequenza delle directory in cui è stata fatta la ricerca avviata dal riferimento a un file è detta percorso di ricerca    
 
|||||DIRECTPORY CON STRUTTURA AD ALBERO
La corrispondenza struttura tra directory a 2 livelli e albero a 2 livelli permette di generalizzare facilmente il concetto. Il file system dell’MS-DOS è strutturato ad albero. L’albero ha una dir radice e ogni file del sistema ha un unico nome di percorso. Una dir contiene un insieme di file o sottodir. Le dir sono semplicemente file trattati in modo diverso. Normalmente ogni utente dispone di una dir corrente. Quando si fa riferimento a u file, si esegue una ricerca nella dir corrente. Se il file non si trova in tale dir, l’utente deve specificare un altro path. La dir corrente iniziale di un utente è stabilita all’avvio del lavoro d’elaborazione. I nomi di percorso possono essere di 2 tipi: percorsi assoluti o relativi. Il primo comincia dalla radice dell’albero, il secondo parte dalla dir corrente. Una decisione importante è il modo in cui effettuare la cancellazione di una dir. Se una dir è vuota la si può eliminare, se è piena o si cancella automaticamente tutto il suo contenuto oppure si devono cancellare manualmente ciascun file o sottodir contenuti e solo quando è vuota si può cancellare.

|||||DIRECTORY CON STRUTTURA A GRAFO CICLICO
Si pensi al lavoro di un progetto di 2 programmatori che devono lavorare sullo stesso file, quindi la sottodir comune deve essere condivisa. Nel sistema esiste quindi una dir condivisa o un file condiviso. La struttura ad albero no ammette la condivisione. Un grafo aciclico invece permette alle dir di avere sottodir e file condivisi. Lo stesso file o la stessa sottodir possono essere in due dir diverse. La condivisione non è una copia di un file ma ne esiste uno solo effettivo, perciò tutte le modifiche sono immediatamente visibile. Nel sistema unix, per la condivisione prevede la  creazione di un nuovo elemento di dir, chiamato collegamento. Un collegamento è un puntatore a un altro file o dir. Quando si fa riferimento a un file si compie la ricerca nella dir, l’elemento cercato è contrassegnato come collegamento e riporta il nome di percorso del file o della dir reale. Un altro comune metodo per la realizzazione dei file condivisi prevede semplicemente la duplicazione di tutte le informazioni relative ai file in entrambe le dir di condivisione, facendo sorgere allora il problema della coerenza. Un altro problema è la cancellazione poiché è necessario stabile in quali casi è possibili allocare e utilizzare lo spazio allocato in condivisione. In un sistema con collegamenti simbolici la soluzione è semplice. Il cancellamento di un collegamento non influisce sul file originale mentre se si cancella il file il collegamento non viene rimosso ma è a cura dell’utente rimuoverlo. Il sistema UNIX usa per i collegamenti non simbolici un contatore di ogni collegamento di un file. Quando il contatore vale 0, allora è possibile rimuoverlo.    

|||||DIRECTORY CON STRUTTURA A GRAFO GENERALE
Un serio problema connesso all’uso di una struttura a grafo aciclico consiste nell’assicurare che non vi siano cicli. Quando si aggiungono collegamenti a una struttura ad albero, tale struttura si trasforma in una semplice struttura a grafo.  Il vantaggio principale della struttura a grafo aciclico è data dalla semplicità degli algoritmi necessari per attraversarlo e per determinare quando no ci siano più riferimenti a un file. È preferibile evitare un duplice attraversamento di sezioni condivise idi un grafo ciclico perché costituirebbe una perdita di tempo. Se si permette che esistano cicli, è preferibili evitare la duplice ricerca per evitare cicli infiniti di ricerca. Se esistono cicli il contatore dei link non è zero quindi la cancellazione non potrebbe mai avvenire in UNIX. La difficoltà dei grafi è proprio quella di evitare i cicli quando si aggiungono nuovi collegamenti. 

4. MONTAGGIO DI UN FILE SYSTEM 
Così come si deve aprire un file per poterlo usare, per essere reso accessibile ai processi di un sistema, un file system deve essere montato. La procedura di montaggio è molto semplice: si fornisce al SO il nome del dispositivo e la sua locazione nella struttura di file e dir alla quale agganciare il file system il passo successivo consiste nella verifica da parte del sistema operativo della validità del file system contenuto nel dispositivo. La verifica si compite chiedendo al driver del dispositivo di leggere la directory di dispositivo e controllando che tale dire abbia il formato previsto. infine il SO annota nella sua struttura della directory che un certo file system è montato a punto di montaggio specificato. Questo schema permette al SO di traversare la sua struttura della dir passando da un file system a un altro secondo le necessita. Un sistema Mac ogni volta che rileva per la prima volta un disco, cerca un file system. Se ne trova uno esegue aromaticamente il montaggio del file alla radice, aggiungendo un’icona sulla scrivania. Micorsoft associa una lettera per ogni volume. Il percorso quindi è lettera:\perocrso\file. Le versioni più recenti di Win è possibile monta r un file system in qualsiasi punto dell’albero.  
 
5. CONDIVISIONE DEI FILE 
Una volta che più utenti possono condividere file, l’obiettivo diventa estendere la condivisione a più file system. Infine ci possono essere diverse interpretazione delle azioni conflittuali su file condivisi    

|||||UTENTI MULTIPLI 
Se un SO permette l’uso del sistema da parte di più utenti, diventano particolarmente rilevanti i problemi relativi alla condivisione dei file, alla loro identificazione tramite nome e alla loro protezione. Il sistema può permettere a ogni utente di accedere ai file egli altri utente oppure chiedere i permessi di accesso. Per realizzare i meccanismi di condivisione e protezione, il sistema deve memorizzare e gestire gli attributi di dir e file. La maggior parte dei sistema hanno adotta i concetti di proprietario, gruppo e altri. Il proprietario è l’utente che può cambiare gli attributi di un file, concedere l'accesso. L’attributo gruppo invece si definisce al sottoinsieme di utenti autorizzati a condividere l’accesso. Gli identificatori del gruppo e del proprietario sono memorizzati insieme con alti attributi del file.   


|||||FILE SYSTEM REMOTI
I metodi con i quali i file si condividono in una rete sono cambiati molto, seguendo l’evoluzione della tecnologia. Un primo metodo consiste nel trasferimento dei file tramite i programmi come l’ftp.  
? Metodo client-server. 
I file system remoti permettono il montaggio di uno o più file system di uno o più calcolatori remoti in un calcolatore locale. Il calcolatore contenenti i file si chiamano server, mentre quelli che ricevono sono chiamati client. La relazione tra cliente e server è piuttosto comune tra i calcolatori in rete. Il server in genere specifica e file disponibili su di un volume. Tra le soluzioni per l’autenticazione è quella dell’invio comune di chiavi cifrate. Nel caso di UNIX  e del suo file system di rete NFS, l’autenticazione avviene tramite le informazioni di connessione relative al client. I protocolli NFS permettono relazioni da molti a molti, cioè + server possono fornire dati a + client. Una volta montato il file system remoto, l richieste delle operazioni su file sono inviate al server usando il protocollo DFS. Per il montaggio può applicare la stessa semantica dei file system locali. Nella richiesta di apertura di un file, il client invia il nome utente e la richiesta che verrà esaminata dal server per gestire i permessi.  

? Sistemi informativi distribuiti. 
Per semplificare la gestione dei servizi client-server i sistemi informativi distribuiti sono stati concepiti per forre un accesso unificato alle informazioni necessarie per il calcolo remoto. Il sistema dei nomi di dominio DNS fornisce le traduzioni dai nomi dei calcolatori agli indirizzi di rete per il web. Altri sistemi informativi distribuiti forniscono uno spazio identificato da nomeutente/pwd/identificatoreutente/idenitficatoregruppo/ per un servizio distribuito. Nel caso delle reti microsoft CIFS le informazioni di rete si usano insieme con gli elementi di autenticazione dell’utente per creare un nome utente di rete che il server usa per decidere se premetter o negare l'accesso. L’industria si sta orientando verso il protocollo LDAP come meccanismo sicura per la comunicazione distribuita. Se il protocolla  avrà successo, un’organizzazione potrà usare una singola dir LDAP per memorizzare le informazioni su tutti gli utenti e le risorse di tutti i calcolatori.  

? Malfunzionamenti. I file system locali possono presentare malfunzionamenti per varie cause: problemi dei dischi che li contengono, alterazione dei dati relativi alle strutture delle dire o a informazioni necessarie alla gestione dei dischi, malfunzionamenti dei controllori dei dischi. Molte cause portano al crollo dei sistema, all’emissione di una condizione d’errore e alla necessita di un intervento umano per risolver il problema. L’uso di file system remoti implica maggior possibilità di malfunzionamenti. Nel caso delle reti si possono verificare interruzioni del collegamento tra due calcolatori, dovute a malfunzionamenti o a improprie configurazioni. Nel caso di un crollo del server o a un malfunzionamento della rete si porta all’inaccessibilità del file system remoto. Invece di comportarsi come la perdita di un file system locale, deve provvedere a terminare tutte le operazioni sul server e attendere che il la connessione ritorni. Per mantener questo tipo di recupero dal malfunzionamento è necessario tenere delle informazioni sullo stato dei client e dei server.  

|||||SEMANTICA DELLA CONCORRENZA 
La semantica della coerenza è un importante criterio per la valutazione di qualsiasi file system che consenta la condivisone dei file. In particolare questa semantica deve specificare quando le modifiche ai dati appartate da un utente possono essere osservate da alti ruteni. È direttamene correlati agli algoritmi di sincronizzazione. Tuttavia a causa delle lunghe latenze e delle basse velocità tra trasferimento dei dischi e delle reti, i complessi algoritmi di solito no si impiegano per l’IO su file.  
? Semantica unix. Le scritture in un file aperto da parte di un utente sono immediatamente visibili ad altri utenti che hanno aperto contemporaneamente lo stesso file.  
? Semantica delle sessioni. Le scritture in un file aperto da un utente sono visibili immediatamente ad altri utenti ma una volta chiuso le modifiche sono visibili solo agli utenti che apriranno il file successivamente. 
? Semantica dei file condivisi immutabili. Un altro metodo p quello dei file condivisi immutabile: una volta che un file è stato dichiarato condiviso, non può essere modificato. 

6. PROTEZIONE  
La salvaguardia delle informazioni contenute in un sistema di calcolo da i danni fisici e da  accessi impropri è fondamentale. Generalmente l’affidabilità è assicurata da più copie dei file. Molti calcolatori hanno programmi di sistema che programmano a intervalli regolari la creazione di copie che potrebbero essere cancellati per sbaglio o a causa di danneggiamenti dei dischi.  

|||||TIPI DI ACCESSO
La necessita di proteggere i file deriva direttamene dalla possibilità di accedervi. I sistemi che non permettono l’accesso a file di altri utenti non richiedono protezione. Ciò che serve è un accesso controllato. Si possono controllare: 
- lettura - scrittura - esecuzione - aggiunta - cancellazione  - elencazione 
sono stai proposti molti meccanismi di protezione e come al solito ogni meccanismo ha vantaggi e svantaggi.   

|||||CONTROLLO DEGLI ACCESSI
Il problema della protezione comune è il controllo degli accessi. Lo schema generale per realizzare tale lista è quello dell’ACL a ogni file e dir ossia la lista degli utenti e delle operazioni che si possono fare. Questo ha il vantaggio di permettere complessi metodi d’accesso ma ha lo svantaggio della costruzione di una lista per ogni file e il compito è noioso. Per risolvere questo problema può essere introdotto una versione diversa della lista dove vengono specificati il proprietario, il gruppo e l’universo. Affinché questo schema funzioni correttamente è necessario uno stretto controllo dei permessi e delle liste di controllo.